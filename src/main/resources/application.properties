
socket-server.port=8085
# socket-server.host=192.168.0.10
socket-server.host=localhost
# classpath:/ seria la carpeta resources
custom.firebase.credentials.path=classpath:/firebase-auth.json


# HTTPS
# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
# server.ssl.key-store=classpath:keystore/reto3.p12
server.ssl.key-store=classpath:keystore/certificate.p12
# The password used to generate the certificate
# server.ssl.key-store-password=mikel12
server.ssl.key-store-password=mikel1234
# The alias mapped to the certificate
# server.ssl.key-alias=reto3
# Since we are using a Spring Security enabled application, let's configure it to accept only HTTPS requests
server.ssl.enabled=true


# MAILING
# info: https://support.google.com/a/answer/176600?hl=en
# https://mail.google.com/mail/u/0/#settings/fwdandpop
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=NUESTRACUENTA@gmail.com
# esta contraseña no debería estar en codigo, deberia estar unicamente en variable de entorno
spring.mail.password=${SPRING_EMAIL_PASSWORD:laPasswordGenerada__NoLaQueUtilizamosAlCrearLaCuenta!}
# se van a enviar correos desde una cuenta real a la que nos vamos a autenticar
spring.mail.properties.mail.smtp.auth=true
# envio cifrado
spring.mail.properties.mail.smtp.starttls.enable=true
